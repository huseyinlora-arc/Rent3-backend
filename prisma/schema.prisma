generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Tenant {
  id            Int      @id @default(autoincrement())
  walletAddress String?  @unique
  nullifierHash String   @unique
  name          String?
  email         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  rentedProperty   Property?       @relation(fields: [rentedPropertyId], references: [id])
  rentedPropertyId Int?            @unique
  paymentsMade     RentalPayment[]
}

model PropertyOwner {
  id            Int      @id @default(autoincrement())
  walletAddress String?  @unique
  nullifierHash String   @unique
  name          String?
  email         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ownedProperties  Property[]
  paymentsReceived RentalPayment[]
}

model Property {
  // Metadata
  id           Int           @id @default(autoincrement())
  owner        PropertyOwner @relation(fields: [ownerAddress], references: [walletAddress])
  ownerAddress String

  // Tenant Info
  tenant        Tenant?
  tenantAddress String?

  // Location details
  country      String
  city         String
  address      String
  neighborhood String

  // Property details
  type         PropertyType
  bedrooms     Int
  bathrooms    Int
  furnished    Boolean      @default(false)
  floorSizeSqm Int
  description  String

  // Additional details
  yearBuilt     Int?
  parkingSpaces Int?      @default(0)
  amenities     Amenity[]
  images        String[]

  // Pricing details
  rentalPrice    Float
  dateAvailable  DateTime?       @default(now())
  rentalPayments RentalPayment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RentalPayment {
  id            Int           @id @default(autoincrement())
  tenant        Tenant        @relation(fields: [tenantAddress], references: [walletAddress])
  tenantAddress String
  owner         PropertyOwner @relation(fields: [ownerAddress], references: [walletAddress])
  ownerAddress  String

  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int

  amount          Float
  transactionHash String
  createdAt       DateTime @default(now())
}

enum PropertyType {
  HOUSE
  APARTMENT
  TOWNHOUSE
  DUPLEX
  PENTHOUSE
  STUDIO
  CONDO
}

enum Amenity {
  SWIMMING_POOL
  GYM
  SECURITY_SYSTEM
  AIR_CONDITIONING
  HEATING
  BALCONY
  FIREPLACE
  GARAGE
  GARDEN
  ELEVATOR
  PET_FRIENDLY
}
