// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Tenant {
  id            Int      @id @default(autoincrement())
  walletAddress String   @unique
  nullifierHash String   @unique
  name          String?
  email         String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  rentedProperty   Property?       @relation(fields: [rentedPropertyId], references: [id])
  rentedPropertyId Int?            @unique
  paymentsMade     RentalPayment[]
}

model PropertyOwner {
  id            Int      @id @default(autoincrement())
  walletAddress String   @unique
  nullifierHash String   @unique
  name          String?
  email         String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ownedProperties  Property[]
  paymentsReceived RentalPayment[]
}

model Property {
  id           Int           @id @default(autoincrement())
  owner        PropertyOwner @relation(fields: [ownerAddress], references: [walletAddress])
  ownerAddress String

  tenant        Tenant?
  tenantAddress String?

  address     String
  type        String
  bedrooms    Int
  bathrooms   Int
  size        Int?
  description String
  rentalPrice Float

  available Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RentalPayment {
  id            Int           @id @default(autoincrement())
  tenant        Tenant        @relation(fields: [tenantAddress], references: [walletAddress])
  tenantAddress String
  owner         PropertyOwner @relation(fields: [ownerAddress], references: [walletAddress])
  ownerAddress  String

  amount      Float
  paymentDate DateTime
  createdAt   DateTime    @default(now())
  paymentType PaymentType
}

enum PaymentType {
  RENT
  DEPOSIT
}
